<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>ANotes - Programming</title><link href="https://adamnovotny.com/" rel="alternate"></link><link href="https://adamnovotny.com/feeds/programming.atom.xml" rel="self"></link><id>https://adamnovotny.com/</id><updated>2021-03-27T00:00:00-05:00</updated><entry><title>Dynamic HTML with Python, AWS Lambda, and Containers</title><link href="https://adamnovotny.com/blog/dynamic-html-with-python-aws-lambda-and-containers.html" rel="alternate"></link><published>2021-03-27T00:00:00-05:00</published><updated>2021-03-27T00:00:00-05:00</updated><author><name>Adam Novotny</name></author><id>tag:adamnovotny.com,2021-03-27:/blog/dynamic-html-with-python-aws-lambda-and-containers.html</id><summary type="html">&lt;p&gt;This article is an extension of my previous article describing a similar &lt;a href="https://adamnovotny.com/blog/serving-dynamic-web-pages-using-python-and-aws-lambda.html" target="_blank"&gt;deployment process using native AWS Lambda tools&lt;/a&gt;. However, Amazon since started &lt;a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-container-image-support/" target="_blank"&gt;supporting container images&lt;/a&gt; and updated it’s pricing policy to &lt;a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-1ms-billing-granularity-adds-cost-savings/" target="_blank"&gt;1ms granularity&lt;/a&gt;. Both are major developments improving tooling and making small deployments cost effective.&lt;/p&gt;
&lt;p&gt;&lt;a href="/theme/images/1*WSpeFmskKx0xiwx-WRRJ6A.jpeg.png"&gt;&lt;img src="/theme/images/1*WSpeFmskKx0xiwx-WRRJ6A.jpeg.png" alt="Deploying AWS Lambda using a container" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My &lt;a href="https://adamnovotny.com/blog/serving-dynamic-web-pages-using-python-and-aws-lambda.html" target="_blank"&gt;previous&lt;/a&gt; article …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article is an extension of my previous article describing a similar &lt;a href="https://adamnovotny.com/blog/serving-dynamic-web-pages-using-python-and-aws-lambda.html" target="_blank"&gt;deployment process using native AWS Lambda tools&lt;/a&gt;. However, Amazon since started &lt;a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-container-image-support/" target="_blank"&gt;supporting container images&lt;/a&gt; and updated it’s pricing policy to &lt;a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-1ms-billing-granularity-adds-cost-savings/" target="_blank"&gt;1ms granularity&lt;/a&gt;. Both are major developments improving tooling and making small deployments cost effective.&lt;/p&gt;
&lt;p&gt;&lt;a href="/theme/images/1*WSpeFmskKx0xiwx-WRRJ6A.jpeg.png"&gt;&lt;img src="/theme/images/1*WSpeFmskKx0xiwx-WRRJ6A.jpeg.png" alt="Deploying AWS Lambda using a container" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My &lt;a href="https://adamnovotny.com/blog/serving-dynamic-web-pages-using-python-and-aws-lambda.html" target="_blank"&gt;previous&lt;/a&gt; article focused on the logic of the code and didn’t address how to actually deploy the function because that was well covered by AWS in its many tutorials. Here I explore the new the container deployment options while keeping all business logic untouched. Please review the AWS tutorial on deploying a &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/python-image.html" target="_blank"&gt;generic Python Lambda code using containers&lt;/a&gt; which I leveraged below.&lt;/p&gt;
&lt;h4&gt;1. Dockerfile&lt;/h4&gt;
&lt;pre&gt;FROM public.ecr.aws/lambda/python:3.8
RUN mkdir -p /mnt/app
ADD app.py /mnt/app
ADD index.html /mnt/app
WORKDIR /mnt/app
RUN pip install --upgrade pip
RUN pip install Jinja2==2.11.*
CMD ["/mnt/app/app.handler"]&lt;/pre&gt;
&lt;p&gt;I am using the AWS base image because it is packaged with a very nice mini server that simulates function responses when developing locally. This is extremely useful because we can call the function with 100s of arguments and verify that it behaves as expected before deployed.&lt;/p&gt;
&lt;h4&gt;App code&lt;/h4&gt;
&lt;p&gt;From the Dockerfile, we can see that all application code is contained in two files:&lt;/p&gt;
&lt;p&gt;1) app.py:&lt;/p&gt;
&lt;pre&gt;import os
from jinja2 import Environment, FileSystemLoader&lt;/pre&gt;
&lt;pre&gt;def lambda_handler(event, context):
    env = Environment(loader=FileSystemLoader(os.path.join(os.path.dirname(__file__), "."), encoding="utf8"))
    my_name_from_query = False
    if event["queryStringParameters"] and "my_name" in event["queryStringParameters"]:
        my_name_from_query = event["queryStringParameters"]["my_name"]
    template = env.get_template("index.html")
    html = template.render(
        my_name=my_name_from_query
    )
    return {
        "statusCode": 200,
        "body": html,
        "headers": {
            "Content-Type": "text/html",
        }
    }&lt;/pre&gt;
&lt;p&gt;2) index.html:&lt;/p&gt;
&lt;p&gt;&lt;a href="/theme/images/1*aJfoRhYbqPXONxww3qyYeA.png.png"&gt;&lt;img src="/theme/images/1*aJfoRhYbqPXONxww3qyYeA.png.png" alt="index.html" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;app.py simply parses one argument named “my_name” from the Lambda query string and passes it to the html template as variable named “my_name”. Jinja2 then parses the variable and returns the final template.&lt;/p&gt;
&lt;h4&gt;Calling and testing the app locally&lt;/h4&gt;
&lt;p&gt;Testing the app locally is very simple thanks to the new container packaging. Simply run docker-compose -f docker-compose.yml up, where docker-compose.yml file is defined as:&lt;/p&gt;
&lt;pre&gt;version: '3'
services:
  cont_name:
    container_name: cont_name
    image: cont_name_img
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/mnt/app
    ports:
      - "9000:8080"
    stdin_open: true
    tty: true
    restart: always&lt;/pre&gt;
&lt;p&gt;This stands up the function locally on a simple AWS-provided server. We can send requests and monitor responses using Python code such as:&lt;/p&gt;
&lt;pre&gt;import requests
r = requests.get(
    "http://localhost:9000/2015-03-31/functions/function/invocations", 
    data=open("event.json", "rb")
)
print(r.json())&lt;/pre&gt;
&lt;p&gt;where “event.json” is any .json file we wish to send to the lambda function as arguments. In the example case above, we would send something like:&lt;/p&gt;
&lt;pre&gt;{
  "queryStringParameters": {
    "my_name": "Adam"
  }
}&lt;/pre&gt;
&lt;h4&gt;Cost&lt;/h4&gt;
&lt;p&gt;The simple AWS base server returns responses such as the one below. This is where we can see the significant impact of the new 1ms pricing update. The cost of running this example code is about 9ms which is very small considering that we are returning a full html template to browsers. However, previously AWS would charge for the full 100ms because that was the minimum charge defined. Now, this function could cost nearly 90% less!&lt;/p&gt;
&lt;p&gt;&lt;a href="/theme/images/1*5Xq3l1IxQmCWQxIkSg4wLw.png.png"&gt;&lt;img src="/theme/images/1*5Xq3l1IxQmCWQxIkSg4wLw.png.png" alt="Lambda duration" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>Serving Dynamic Web Pages using Python and AWS Lambda</title><link href="https://adamnovotny.com/blog/serving-dynamic-web-pages-using-python-and-aws-lambda.html" rel="alternate"></link><published>2020-07-25T00:00:00-05:00</published><updated>2020-07-25T00:00:00-05:00</updated><author><name>Adam Novotny</name></author><id>tag:adamnovotny.com,2020-07-25:/blog/serving-dynamic-web-pages-using-python-and-aws-lambda.html</id><summary type="html">&lt;p&gt;While AWS Lambda functions are typically used to build API endpoints, at their core Lambda functions can return almost anything. This includes returning html markup with dynamic content.&lt;/p&gt;
&lt;p&gt;&lt;a href="/theme/images/1*9bPdHLV7ghV1RuNYOGkTvA.png.png"&gt;&lt;img src="/theme/images/1*9bPdHLV7ghV1RuNYOGkTvA.png.png" alt="AWS Lambda + Python + Jinja" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I will not go into details describing how to deploy AWS Lambda functions. Please see the official &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html" target="_blank"&gt;documentation&lt;/a&gt;. I will however describe …&lt;/p&gt;</summary><content type="html">&lt;p&gt;While AWS Lambda functions are typically used to build API endpoints, at their core Lambda functions can return almost anything. This includes returning html markup with dynamic content.&lt;/p&gt;
&lt;p&gt;&lt;a href="/theme/images/1*9bPdHLV7ghV1RuNYOGkTvA.png.png"&gt;&lt;img src="/theme/images/1*9bPdHLV7ghV1RuNYOGkTvA.png.png" alt="AWS Lambda + Python + Jinja" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I will not go into details describing how to deploy AWS Lambda functions. Please see the official &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html" target="_blank"&gt;documentation&lt;/a&gt;. I will however describe how to return dynamic html content instead of a typical &lt;a href="https://en.wikipedia.org/wiki/JSON" target="_blank"&gt;JSON&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Step 0 — Optional&lt;/h4&gt;
&lt;p&gt;If you prefer to develop and test lambda functions locally (as I do), you can use Docker to simulate the AWS lambda function environment. A sample Dockerfile I use is below.&lt;/p&gt;
&lt;pre&gt;FROM amazonlinux:latest
RUN mkdir -p /mnt/app
ADD . /mnt/app
WORKDIR /mnt/app
RUN yum update -y
RUN yum install gcc -y
RUN yum install gcc-c++ -y
RUN yum install findutils -y
RUN yum install zip -y
RUN amazon-linux-extras install python3=3.6.2
RUN pip3 install --upgrade pip
RUN pip3 install -r requirements.txt -t aws_layer/python&lt;/pre&gt;
&lt;p&gt;The requirements.txt includes just one package for simplicity. It is the common &lt;a href="https://jinja.palletsprojects.com/en/2.11.x/" target="_blank"&gt;templating for Python called Jinja2&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;Jinja2==2.11.1&lt;/pre&gt;
&lt;p&gt;You can test your Lambda function by simple calling it with sample parameters:&lt;/p&gt;
&lt;pre&gt;import lambda_function
event = {
    "queryStringParameters": {
        "param1": "value1"
    },
    "path": "/api",
    "requestContext": {
         "param2": "value2"
    }
}
res = lambda_function.lambda_handler(event=event, context={})
assert 200 == int(res["statusCode"])&lt;/pre&gt;
&lt;h4&gt;Step 1 — Write html template&lt;/h4&gt;
&lt;p&gt;In this step, we write the html template the Lambda function will return. A good default is the new &lt;a href="https://v5.getbootstrap.com/docs/5.0/getting-started/introduction/" target="_blank"&gt;Bootstrap 5&lt;/a&gt; CSS framework where the recommended starting markup looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="/theme/images/1*b3ZXkCsw8BwLt2Fx_eu6PQ.png.png"&gt;&lt;img src="/theme/images/1*b3ZXkCsw8BwLt2Fx_eu6PQ.png.png" alt="Sample HTML page" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Saving this file in folder “templates” and naming it index.html, we are ready to write the Lambda function.&lt;/p&gt;
&lt;h4&gt;Step 2 — Write Lambda function to serve your html page&lt;/h4&gt;
&lt;p&gt;In the example below, the lambda function expects URL parameters and parses those. So when parsing a custom URL, the format would look something like this: Example.com/?my_name=somename. See step 10 in &lt;a href="https://adamnovotny.com/blog/serverless-web-apps-with-firebase-and-aws-lambda.html" target="_blank"&gt;this tutorial&lt;/a&gt; to add custom URLs to your API Gateway-triggered Lambda functions.&lt;/p&gt;
&lt;pre&gt;import os
import sys
from jinja2 import Environment, FileSystemLoader&lt;/pre&gt;
&lt;pre&gt;def lambda_handler(event, context):
    env = Environment(loader=FileSystemLoader(os.path.join(os.path.dirname(__file__), "templates"), encoding="utf8"))
    my_name = False
    if event["queryStringParameters"] and "my_name" in event["queryStringParameters"]:
        my_name_query = event["queryStringParameters"]["my_name"]
    template = env.get_template("index.html")
    html = template.render(
        my_name=my_name_query
    )
    return response(html)&lt;/pre&gt;
&lt;pre&gt;def response(myhtml):
    return {
        "statusCode": 200,
        "body": myhtml,
        "headers": {
            "Content-Type": "text/html",
        }
    }&lt;/pre&gt;
&lt;ul&gt;&lt;li&gt;jinja2 loads your previously created index.html using class “FileSystemLoader” and we store it as variable “env”&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;variable “my_name” is parsed from the URL query parameters as explained above and stored as the Python variable my_name_query&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;the jinja2 render function then passes my_name_query to the template and returns the html page&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Also published on &lt;a href="https://adamnovotny.com" target="_blank"&gt;adamnovotny.com&lt;/a&gt;&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>Custom VPN using PiVPN and public cloud</title><link href="https://adamnovotny.com/blog/custom-vpn-using-pivpn-and-public-cloud.html" rel="alternate"></link><published>2018-12-30T00:00:00-05:00</published><updated>2018-12-30T00:00:00-05:00</updated><author><name>Adam Novotny</name></author><id>tag:adamnovotny.com,2018-12-30:/blog/custom-vpn-using-pivpn-and-public-cloud.html</id><summary type="html">&lt;h4&gt;Motivation: Many public Wi-Fi networks block certain internet ports and protocols. For example, a public library might only allow ports 80 and 443 and the TCP protocol. Leaving aside the logic of such decisions by network owners, they prevent users from taking advantage of many commercial VPN products that rely …&lt;/h4&gt;</summary><content type="html">&lt;h4&gt;Motivation: Many public Wi-Fi networks block certain internet ports and protocols. For example, a public library might only allow ports 80 and 443 and the TCP protocol. Leaving aside the logic of such decisions by network owners, they prevent users from taking advantage of many commercial VPN products that rely on other ports. The goal of this article is to create a custom VPN solution to improve privacy even on such restricted public networks.&lt;/h4&gt;
&lt;p&gt;&lt;a href="/theme/images/1*hI_JbE-q2OQpXW1tEB46Cg.png.png"&gt;&lt;img src="/theme/images/1*hI_JbE-q2OQpXW1tEB46Cg.png.png" alt="AWS, Google Cloud, Microsoft Azure" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;
&lt;a href="/theme/images/1*7C1odbX4Kk_yxToAaKnlwA.png.png"&gt;&lt;img src="/theme/images/1*7C1odbX4Kk_yxToAaKnlwA.png.png" alt="PiVPN" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All step are outlined in more detail in &lt;a href="https://github.com/adam5ny/vpn-gcp-pivpn" target="_blank"&gt;this Github repo&lt;/a&gt;. The tutorial is written for Python 3 and &lt;a href="https://cloud.google.com/compute/" target="_blank"&gt;Google Cloud Compute&lt;/a&gt;. However, all public clouds can be used including AWS or Azure.&lt;/p&gt;
&lt;h4&gt;Create public cloud compute instance&lt;/h4&gt;
&lt;p&gt;Login to &lt;a href="https://console.cloud.google.com/" target="_blank"&gt;GCP console&lt;/a&gt;. Create an Ubuntu machine and make sure to allow https traffic. Then locate your public IP which is where your traffic will be routed. In GCP, you can find it using the following steps (as of Dec 2018): VPC network &gt; External IP addresses &gt; switch the type of your instance IP from “Ephemeral” to “Static”. This will be your public IP.&lt;/p&gt;
&lt;h4&gt;Create PiVPN instance&lt;/h4&gt;
&lt;p&gt;Login to your compute instance and download PiVPN using the following command:&lt;/p&gt;
&lt;pre&gt;curl -L &lt;a href="https://install.pivpn.io" target="_blank"&gt;https://install.pivpn.io&lt;/a&gt; | bash&lt;/pre&gt;
&lt;p&gt;Follow all setup steps using default values except for port and protocol. Select port 443 and protocol TCP. Select reboot at the end of the installation.&lt;/p&gt;
&lt;h4&gt;Create VPN credentials&lt;/h4&gt;
&lt;pre&gt;pivpn add&lt;/pre&gt;
&lt;p&gt;Enter your custom username and password. Download credentials to your computer from your newly create cloud computer instance. Credentials are typically located at ~/ovpns on your Ubuntu instance.&lt;/p&gt;
&lt;h4&gt;Download a VPN client for your platform&lt;/h4&gt;
&lt;p&gt;For MacOS you may use &lt;a href="https://tunnelblick.net/" target="_blank"&gt;Tunnelblick&lt;/a&gt;. Then drag credentials (.ovpn) from the previous step to the Tunneblick app icon. Click on Tunneblick icon to connect to your VPN with your custom username and password.&lt;/p&gt;
&lt;h4&gt;Final notes:&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;use port 80 instead of 443 above if necessary.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;to minimize cost, remember to shut down your compute instance when you are not using the VPN. The typical cost is &lt; $20 for 100GB of traffic and 24/7 usage which is in line with respectable third-party VPN providers. However, your cost may be significantly lower if you shut down unused instances and use pre-emptible instances (GCP-specific).&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Author website: &lt;a href="https://www.adamnovotny.com/" target="_blank"&gt;adamnovotny.com&lt;/a&gt;&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>Serverless web apps with Firebase and AWS Lambda</title><link href="https://adamnovotny.com/blog/serverless-web-apps-with-firebase-and-aws-lambda.html" rel="alternate"></link><published>2018-09-09T00:00:00-05:00</published><updated>2018-09-09T00:00:00-05:00</updated><author><name>Adam Novotny</name></author><id>tag:adamnovotny.com,2018-09-09:/blog/serverless-web-apps-with-firebase-and-aws-lambda.html</id><summary type="html">&lt;h4&gt;Topics: Firebase Hosting, AWS Lambda&lt;/h4&gt;
&lt;p&gt;Serverless has become a popular solution for small to medium-sized projects. The downside is a technology stack lock-in which forces developers to use technologies that might not be optimal for their projects. For example, people using &lt;a href="https://firebase.google.com/" target="_blank"&gt;Google’s Firebase&lt;/a&gt; to host their static resources have …&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Topics: Firebase Hosting, AWS Lambda&lt;/h4&gt;
&lt;p&gt;Serverless has become a popular solution for small to medium-sized projects. The downside is a technology stack lock-in which forces developers to use technologies that might not be optimal for their projects. For example, people using &lt;a href="https://firebase.google.com/" target="_blank"&gt;Google’s Firebase&lt;/a&gt; to host their static resources have to write custom endpoint &lt;a href="https://firebase.google.com/docs/functions/" target="_blank"&gt;functions&lt;/a&gt; in JavaScript or TypeScript (as of August 2018). Developers typically use custom backend functions to hide business logic or proprietary data operations from users because anything that runs in the browsers front end as JavaScript is ultimately an open book from the users perspective.&lt;/p&gt;
&lt;p&gt;&lt;a href="/theme/images/1*6QfJob8HhDsYsGjzYSb3eA.jpeg.png"&gt;&lt;img src="/theme/images/1*6QfJob8HhDsYsGjzYSb3eA.jpeg.png" alt="Firebase + AWS Lambda" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One simple solution is to combine Firebase with custom functions using a different platform. I will outline the steps to create a Firebase-hosted web app, setup DNS for subdomain, and create AWS Lambda functions to serve custom business logic as APIs. This is just an example setup and all major cloud players provide solutions that can be combined in other ways such as using &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html" target="_blank"&gt;AWS S3 to host statics resources&lt;/a&gt; and &lt;a href="https://cloud.google.com/functions/?utm_source=google&amp;utm_medium=cpc&amp;utm_campaign=emea-emea-all-en-dr-bkws-all-all-trial-e-gcp-1003963&amp;utm_content=text-ad-none-any-DEV_c-CRE_253480695966-ADGP_Hybrid%20%7C%20AW%20SEM%20%7C%20BKWS%20~%20EXA_M:1_EMEA_EN_General_Cloud%20Functions_ETL%20Warehouse-KWID_43700019207153401-kwd-34012173938-userloc_1003837&amp;utm_term=KW_function%20google-ST_function%20google&amp;ds_rl=1245734&amp;gclid=EAIaIQobChMInM_0gaH43AIVpp3tCh1CTAHNEAAYASAAEgJ1iPD_BwE&amp;dclid=COGAr4Oh-NwCFQ6ZdwodUTIBBQ" target="_blank"&gt;Google’s Cloud Function&lt;/a&gt; to serve business logic API.&lt;/p&gt;
&lt;p&gt;At the end we will have:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;www.example.com (&lt;a href="https://en.wikipedia.org/wiki/Single-page_application" target="_blank"&gt;single page app&lt;/a&gt; served by Firebase)&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;api.example.com (AWS lambda function serving custom business logic used by www.example.com)&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I will not go into specific details on each platform because their UIs constantly change. Instead, I will highlight the sequence of steps I typically take to setup the services quickly.&lt;/p&gt;
&lt;h4&gt;Firebase hosting&lt;/h4&gt;
&lt;ul&gt;&lt;li&gt;1) Deploy a static web app to &lt;a href="https://firebase.google.com/products/hosting/" target="_blank"&gt;Firebase&lt;/a&gt; by following &lt;a href="https://firebase.google.com/docs/hosting/deploying" target="_blank"&gt;this part&lt;/a&gt; of the Firebase documentation. The end result will be a public web app. Its URL will look something like this: my-project-name.firebaseapp.com&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="/theme/images/1*gH7ELyB6td5o2A1bY4drGw.png.png"&gt;&lt;img src="/theme/images/1*gH7ELyB6td5o2A1bY4drGw.png.png" alt="Firebase hosting setup" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;2) Let’s assume we purchased the custom domain example.com. We now need to update the DNS records so that example.com and www.example.com point to our static web app.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;3) Go to your Firebase project dashboard and in the hosting section initiate the steps to connect to a custom domain. You will need to verify ownership of the domain by adding a DNS TXT record to your registrar’s DNS settings. As always, the &lt;a href="https://firebase.google.com/docs/hosting/custom-domain" target="_blank"&gt;documentation&lt;/a&gt; is useful.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="/theme/images/1*Kd7lW2alk8UA4cL8kkvxxA.png.png"&gt;&lt;img src="/theme/images/1*Kd7lW2alk8UA4cL8kkvxxA.png.png" alt="Connect custom domain to Firebase app" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;4) Go to your domain registrar’s DNS settings, and create a DNS A record for subdomain www pointing to the IP address of the Firebase servers obtained in the previous step. After SSL certificates are automatically provisioned by Firebase, users can go to https://www.example.com to locate your Firebase app.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;5) We also need to make sure that users entering just example.com are also pointed to https://www.example.com. To accomplish this, return to your registrar’s DNS settings and a setup subdomain forwarding. The exact steps vary for each registrar but the end result will be example.com -&gt; https://www.example.com. If possible, set the redirect as permanent 301, forward path, and enable SSL.&lt;/li&gt;&lt;/ul&gt;
&lt;h4&gt;AWS Lambda&lt;/h4&gt;
&lt;p&gt;At this point we have a web app deployed and using our custom URL. The app however uses the subdomain api.example.com to obtain proprietary data. In Angular, the code requesting data from the subdomain may look something like this:&lt;/p&gt;
&lt;pre&gt;const headers = {
    headers: new HttpHeaders({
      'Content-Type':  'application/json',
      'x-api-key': 'some-api-key'
    })
};
this.http.get('&lt;a href="https://api.examle.com/get-data'" target="_blank"&gt;https://api.example.com'&lt;/a&gt;, headers)
.subscribe((data: string) =&gt; {
    const dataJson = JSON.parse(data);
    // some data operations
    }
);&lt;/pre&gt;
&lt;p&gt;If our backend is relatively simple (doesn’t require large third party packages) and runs fast, the easiest solution is to deploy cloud functions at one of the largest providers. AWS limits Lambda deployments to 50MB and the default timeout is 3 seconds which are reasonable guidelines to determine whether your custom API backend is suitable for serverless functions.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;6) We need to create a Lambda function. I like to test my lambda functions locally and then deploy them as zip files to AWS. For Python, follow &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-python-how-to-create-deployment-package.html" target="_blank"&gt;this&lt;/a&gt; tutorial. Lambda supports all major languages and similar tutorials exists for at least Node.js, C#, Go, Java.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="/theme/images/1*ktkhPraczTuDeRUkbkhUUA.png.png"&gt;&lt;img src="/theme/images/1*ktkhPraczTuDeRUkbkhUUA.png.png" alt="AWS Lambda zip upload" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;7) Next we need to make the function publicly available so we will use API Gateway to create a public endpoint. Make sure to check that API key is required and then go to Actions and Deploy API.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="/theme/images/1*HgGVxaoWfxJo9jM3WSs-3Q.png.png"&gt;&lt;img src="/theme/images/1*HgGVxaoWfxJo9jM3WSs-3Q.png.png" alt="API Gateway endpoint creation" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;8) Secure the endpoint with at least an API key which can be created in the API Gateway as well.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="/theme/images/1*UQQ7OzNmF9iNxeWxlIXYDQ.png.png"&gt;&lt;img src="/theme/images/1*UQQ7OzNmF9iNxeWxlIXYDQ.png.png" alt="API key generation example" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;9) Create a Usage Plan that will limit how often your API can be used. This will prevent your Lambda function from being overused. While AWS Lambda has a very generous free tier, security is paramount for peace of mind. A Usage Plan basically connects the API key (step 8) to the endpoint deployment (step 7). At this point, you should be able to use your Lambda function by going to a URL that looks something like this https://xyz1234567.execute-api.us-east-1.amazonaws.com/stage. Remember that an API key is required as a header so tools such as &lt;a href="https://www.getpostman.com/" target="_blank"&gt;Postman&lt;/a&gt; are useful to customize the API requests easily.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="/theme/images/1*xbehZsrAZpOs_zB8QDD6Wg.png.png"&gt;&lt;img src="/theme/images/1*xbehZsrAZpOs_zB8QDD6Wg.png.png" alt="Usage Plan example" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;10) Ultimately, we want to have a nice-looking URL such as api.example.com instead of the long random URL above. First, we need to create a certificate for our subdomain to so that our connection supports &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security" target="_blank"&gt;SSL&lt;/a&gt; (https). Go to Certificate Manager and follow the steps to create a certificate managed by AWS:&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="/theme/images/1*FBijvl_qHBaCx2ue46fSzg.png.png"&gt;&lt;img src="/theme/images/1*FBijvl_qHBaCx2ue46fSzg.png.png" alt="AWS Certificate Manager" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;11) Now that we have a certificate available, return to API Gateway and go to Custom Domain Names and create the API name (such as api.example.com) and select the ACM certificate created in previous step. Map it to your API deployment. This will generate a Target domain name of the form xyz1234567899.cloudfront.net.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;a href="/theme/images/1*et1Xy6T2IAhI2O475rC4Kw.png.png"&gt;&lt;img src="/theme/images/1*et1Xy6T2IAhI2O475rC4Kw.png.png" alt="Custom Domain Name" style="width: 100%" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;12) Return to your domain registrar’s DNS records, and create a CNAME record pointing to the target domain name above (such as xyz1234567899.cloudfront.net). Now once DNS records propagate, requesting api.example.com is going to terminate at your Lambda function and will be accessible by your Firebase frontend.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;That’s it! Now you can deploy a fully featured web app with a custom backend, URL and generous free tiers (as of August 2018). With a little bit of practice the process takes about an hour subject to DNS propagation and requires virtually no backend deployment knowledge. It scales well for most small to medium-sized apps that do not require specialized compute-intensive workloads such as Machine Learning (see my ML deployment article &lt;a href="https://medium.com/coinmonks/machine-learning-tutorial-4-deployment-79764123e9e1" target="_blank"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Author website: &lt;a href="https://www.adamnovotny.com/" target="_blank"&gt;adamnovotny.com&lt;/a&gt;&lt;/p&gt;</content><category term="Programming"></category></entry><entry><title>Linear programming in Python: CVXOPT and game theory</title><link href="https://adamnovotny.com/blog/linear-programming-in-python-cvxopt-and-game-theory.html" rel="alternate"></link><published>2017-08-16T00:00:00-05:00</published><updated>2017-08-16T00:00:00-05:00</updated><author><name>Adam Novotny</name></author><id>tag:adamnovotny.com,2017-08-16:/blog/linear-programming-in-python-cvxopt-and-game-theory.html</id><summary type="html">&lt;p&gt;CVXOPT is an excellent Python package for linear programming. However, when I was getting started with it, I spent way too much time getting it to work with simple game theory example problems. This tutorial aims to shorten the startup time for everyone trying to use CVXOPT for more advanced …&lt;/p&gt;</summary><content type="html">&lt;p&gt;CVXOPT is an excellent Python package for linear programming. However, when I was getting started with it, I spent way too much time getting it to work with simple game theory example problems. This tutorial aims to shorten the startup time for everyone trying to use CVXOPT for more advanced problems.&lt;/p&gt;
&lt;p&gt;All code is available &lt;a href="http://github.com/adam5ny/blogs/tree/master/cvxopt" target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Installation of dependencies:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Using Docker is the fastest way to run the code. In only 5 commands you can replicate my environment and run the code.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Alternatively, the code has the following dependencies: Python (3.5.3), numpy (1.12.1), cvxopt (1.1.9), glpk optimizer (but you can use the default optimizer, glpk is better for some more advanced problems)&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Please review &lt;a href="http://cvxopt.org/examples/tutorial/lp.html" target="_blank"&gt;how CVXOPT solves simple maximization problems&lt;/a&gt;. While this article focuses on game theory problems, it is critical to understand how CVXOPT defines optimization problems in general.&lt;/p&gt;
&lt;p&gt;The first problem we will solve is a &lt;a href="http://en.wikipedia.org/wiki/Minimax#Example" target="_blank"&gt;2-player zero-sum game&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The constraints matrix A is defined as&lt;/p&gt;
&lt;pre&gt;A = [[3, -2, 2], [-1, 0, 4] ,[-4, -3, 1]]&lt;/pre&gt;
&lt;p&gt;Next, we define a maxmin helper function&lt;/p&gt;
&lt;pre&gt;def maxmin(self, A, solver="glpk"):
    num_vars = len(A)
     minimize matrix c
    c = [-1] + [0 for i in range(num_vars)]
    c = np.array(c, dtype="float")
    c = matrix(c)
     constraints G*x &lt;= h
    G = np.matrix(A, dtype="float").T  reformat each variable is in a row
    G *= -1  minimization constraint
    G = np.vstack([G, np.eye(num_vars) * -1])  &gt; 0 constraint for all vars
    new_col = [1 for i in range(num_vars)] + [0 for i in range(num_vars)]
    G = np.insert(G, 0, new_col, axis=1)  insert utility column
    G = matrix(G)
    h = ([0 for i in range(num_vars)] + 
         [0 for i in range(num_vars)])
    h = np.array(h, dtype="float")
    h = matrix(h)
     contraints Ax = b
    A = [0] + [1 for i in range(num_vars)]
    A = np.matrix(A, dtype="float")
    A = matrix(A)
    b = np.matrix(1, dtype="float")
    b = matrix(b)
    sol = solvers.lp(c=c, G=G, h=h, A=A, b=b, solver=solver)
    return sol&lt;/pre&gt;
&lt;p&gt;Last, we use the maxmin helper function to solve our example problem:&lt;/p&gt;
&lt;pre&gt;sol = maxmin(A=A, solver=”glpk”)
probs = sol[“x”]
print(probs)
 [ 1.67e-01]
 [ 8.33e-01]
 [ 0.00e+00]&lt;/pre&gt;
&lt;p&gt;In other words, player A chooses action 1 with probility 1/6 and action 2 with probability 5/6.&lt;/p&gt;
&lt;p&gt;Next we will solve a Correlated Equilibrium problem called Game of Chicken as defined on page 3 of &lt;a href="http://www.cs.rutgers.edu/~mlittman/topics/nips02/nips02/greenwald.ps" target="_blank"&gt;this document&lt;/a&gt;. The constraints matrix A is defined as&lt;/p&gt;
&lt;pre&gt;A = [[6, 6], [2, 7], [7, 2], [0, 0]]&lt;/pre&gt;
&lt;p&gt;Next, we define a ce and build_ce_constraints helper functions:&lt;/p&gt;
&lt;pre&gt;def ce(self, A, solver=None):
    num_vars = len(A)
     maximize matrix c
    c = [sum(i) for i in A]  sum of payoffs for both players
    c = np.array(c, dtype="float")
    c = matrix(c)
    c *= -1  cvxopt minimizes so *-1 to maximize
     constraints G*x &lt;= h
    G = self.build_ce_constraints(A=A)
    G = np.vstack([G, np.eye(num_vars) * -1])  &gt; 0 constraint for all vars
    h_size = len(G)
    G = matrix(G)
    h = [0 for i in range(h_size)]
    h = np.array(h, dtype="float")
    h = matrix(h)
     contraints Ax = b
    A = [1 for i in range(num_vars)]
    A = np.matrix(A, dtype="float")
    A = matrix(A)
    b = np.matrix(1, dtype="float")
    b = matrix(b)
    sol = solvers.lp(c=c, G=G, h=h, A=A, b=b, solver=solver)
    return sol&lt;/pre&gt;
&lt;pre&gt;def build_ce_constraints(self, A):
    num_vars = int(len(A) ** (1/2))
    G = []
     row player
    for i in range(num_vars):  action row i
        for j in range(num_vars):  action row j
            if i != j:
                constraints = [0 for i in A]
                base_idx = i * num_vars
                comp_idx = j * num_vars
                for k in range(num_vars):
                    constraints[base_idx+k] = (- A[base_idx+k][0]
                                               + A[comp_idx+k][0])
                G += [constraints]
     col player
    for i in range(num_vars):  action column i
        for j in range(num_vars):  action column j
            if i != j:
                constraints = [0 for i in A]
                for k in range(num_vars):
                    constraints[i + (k * num_vars)] = (
                        - A[i + (k * num_vars)][1]
                        + A[j + (k * num_vars)][1])
                G += [constraints]
    return np.matrix(G, dtype="float")&lt;/pre&gt;
&lt;p&gt;Using the helper functions, we solve the Game of Chicken&lt;/p&gt;
&lt;pre&gt;sol = ce(A=A, solver="glpk")
probs = sol["x"]
print(probs)
 [ 5.00e-01]
 [ 2.50e-01]
 [ 2.50e-01]
 [ 0.00e+00]&lt;/pre&gt;
&lt;p&gt;In other words, the optimal strategy is for both players to select actions [6, 6] 50% of the time, actions [2, 7] 25% of the time, and action [7, 2] also 25% of the time.&lt;/p&gt;
&lt;p&gt;Hopefully this overview helps in getting you started with linear programming and game theory in Python.&lt;/p&gt;
&lt;p&gt;Credits: &lt;a href="http://cvxopt.org/examples/tutorial/lp.html" target="_blank"&gt;cvxopt.org/examples/tutorial/lp.html&lt;/a&gt;&lt;a href="https://www.cs.duke.edu/courses/fall12/cps270/lpandgames.pdf" target="_blank"&gt;, cs.duke.edu/courses/fall12/cps270/lpandgames.pdf&lt;/a&gt;&lt;a href="https://en.wikipedia.org/wiki/Minimax#Example" target="_blank"&gt;, en.wikipedia.org/wiki/Minimax#Example&lt;/a&gt;&lt;a href="https://www3.ul.ie/ramsey/Lectures/Operations_Research_2/gametheory4.pdf" target="_blank"&gt;, https://www3.ul.ie/ramsey/Lectures/Operations_Research_2/gametheory4.pdf&lt;/a&gt;&lt;a href="https://www.cs.rutgers.edu/~mlittman/topics/nips02/nips02/greenwald.ps" target="_blank"&gt;, cs.rutgers.edu/~mlittman/topics/nips02/nips02/greenwald.ps&lt;/a&gt;&lt;a href="https://www.cs.duke.edu/courses/fall16/compsci570/LPandGames.pdf" target="_blank"&gt;, cs.duke.edu/courses/fall16/compsci570/LPandGames.pdf&lt;/a&gt;&lt;/p&gt;</content><category term="Programming"></category></entry></feed>